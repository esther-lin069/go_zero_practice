// Code generated by MockGen. DO NOT EDIT.
// Source: userCtl.go

// Package userctl is a generated GoMock package.
package userctl

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserCtl is a mock of UserCtl interface.
type MockUserCtl struct {
	ctrl     *gomock.Controller
	recorder *MockUserCtlMockRecorder
}

// MockUserCtlMockRecorder is the mock recorder for MockUserCtl.
type MockUserCtlMockRecorder struct {
	mock *MockUserCtl
}

// NewMockUserCtl creates a new mock instance.
func NewMockUserCtl(ctrl *gomock.Controller) *MockUserCtl {
	mock := &MockUserCtl{ctrl: ctrl}
	mock.recorder = &MockUserCtlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCtl) EXPECT() *MockUserCtlMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserCtl) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserCtlMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserCtl)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockUserCtl) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*RegisterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserCtlMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserCtl)(nil).Register), varargs...)
}
