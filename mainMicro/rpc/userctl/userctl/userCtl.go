// Code generated by goctl. DO NOT EDIT.
// Source: userctl.proto

package userctl

import (
	"context"

	"go-zero/doing/rpc/userctl/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq     = pb.LoginReq
	LoginResp    = pb.LoginResp
	RegisterReq  = pb.RegisterReq
	RegisterResp = pb.RegisterResp

	UserCtl interface {
		// Login rpc Logic
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// Register rpc Logic
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	}

	defaultUserCtl struct {
		cli zrpc.Client
	}
)

func NewUserCtl(cli zrpc.Client) UserCtl {
	return &defaultUserCtl{
		cli: cli,
	}
}

// Login rpc Logic
func (m *defaultUserCtl) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserCtlClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// Register rpc Logic
func (m *defaultUserCtl) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserCtlClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}
